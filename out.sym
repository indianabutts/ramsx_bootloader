Sections:
00: "seg4000" (4000-44A0)


Source: "./main.asm"
                        	     1: 				; ==[ Constants ]============================================
                        	     2: 
                        	     3: 
                        	     4: 	include "SYS_BIOSCALLS.asm"

Source: "SYS_BIOSCALLS.asm"
                        	     1: ;;; MSX BIOS Calls
                        	     2: ;;; Information from : http://map.grauw.nl/resources/msxbios.php
                        	     3: 
                        	     4: 
                        	     5: ;;; ====================================================
                        	     6: ;;; Block Transfer to VRAM from memory
                        	     7: ;;; Inputs:
                        	     8: ;;;       BC - Block Length
                        	     9: ;;;       DE - Start of VRAM
                        	    10: ;;;       HL - Start address of memory
                        	    11: ;;;       Registers: All
                        	    12: ;;; ====================================================
                        	    13: LDIRVM: equ $005C
                        	    14: 
                        	    15: ;;; ====================================================
                        	    16: ;;; Changes the screen colors
                        	    17: ;;; Inputs:
                        	    18: ;;;       Foreground Color in FORCLR
                        	    19: ;;;       Background Color in BAKCLR
                        	    20: ;;;       Border Color in BDRCLR
                        	    21: ;;;       Registers: All
                        	    22: ;;; ====================================================
                        	    23: CHGCLR:	equ $0062
                        	    24: 
                        	    25: ;;; ====================================================
                        	    26: ;;; Clears the screen
                        	    27: ;;; Inputs:
                        	    28: ;;;       Foreground Color in FORCLR
                        	    29: ;;;       Background Color in BAKCLR
                        	    30: ;;;       Border Color in BDRCLR
                        	    31: ;;;       Registers: All
                        	    32: ;;; ====================================================
                        	    33: CLS:	equ $00C3
                        	    34: 
                        	    35: ;;; ====================================================
                        	    36: ;;; Switches to SCREEN 0 (text screen with 40Ã—24 characters)Clears the screen
                        	    37: ;;; Inputs:
                        	    38: ;;;       TXTNAM
                        	    39: ;;;       TXTCGP
                        	    40: ;;;       Registers: All
                        	    41: ;;; ====================================================
                        	    42: INITXT:	equ #006C
                        	    43: 
                        	    44: ;;; ====================================================
                        	    45: ;;; One character input (waiting)
                        	    46: ;;; Output:
                        	    47: ;;;       A - ASCII Code of the input character
                        	    48: ;;;       Registers: AF
                        	    49: ;;; ====================================================	
                        	    50: CHGET equ $009F
                        	    51: 

Source: "./main.asm"
                        	     5: 	include "SYS_VARIABLES.asm"

Source: "SYS_VARIABLES.asm"
                        	     1: ;;; MSX System Variables
                        	     2: ;;; Information from : https://map.grauw.nl/resources/msxsystemvars.php
                        	     3: 	
                        	     4: FORCLR:	equ $F3E9		; Foreground Color - 1 byte
                        	     5: 
                        	     6: BAKCLR:	equ $F3EA		; Background Color - 1 byte
                        	     7: 
                        	     8: BDCLR:	equ $F3EB 		; Border Color - 1 byte
                        	     9: 
                        	    10: TXTNAM:	equ $F3B3
                        	    11: 

Source: "./main.asm"
                        	     6: 	include "CHAR_CODES.asm"

Source: "CHAR_CODES.asm"
                        	     1: ;;; Character codes for both input and output
                        	     2: 	
                        	     3: UP_CODE:	equ $1E
                        	     4: DOWN_CODE:	equ $1F
                        	     5: SPACE_CODE:	equ $20
                        	     6: POINTER_CODE:	equ $CF
                        	     7: 
                        	     8: 

Source: "./main.asm"
                        	     7: 	include "WORKING_VARIABLES.asm"

Source: "WORKING_VARIABLES.asm"
                        	     1: CUR_INDEX:	equ $C001	; Current index of the Cursor
                        	     2: OLD_CUR_INDEX:	equ $C002	; The last index of the Cursor
                        	     3: CUR_GAME:	equ $C003	; The game that was selected
                        	     4: CUR_PAGE:	equ $C004	; The page number
                        	     5: VRM_WRK_AREA:	equ $C100	; Base address for the RAM copy of the VRAM Buffer
                        	     6: 

Source: "./main.asm"
                        	     8: 	include "CONSTANTS.asm"

Source: "CONSTANTS.asm"
                        	     1: ORGADDR	equ $4000	; Origin for the ROM
                        	     2: COM_ACTION_REG:	equ $6FF0	; The command is written here for the Firmware to read
                        	     3: COM_INDEX_REG:	equ $6FF1	; The index for the ROM to load in the current page
                        	     4: COM_ACK_REG:	equ $6FFE	; The Firmware will write the ACK value here for Bootloader to check
                        	     5: COM_START:	equ $7000	; Addresses from 0x7000 to 0x7FFF will trigger the command flow on the Firmware
                        	     6: 
                        	     7: COM_ACT_PU:	equ $40		; Value for Page Up
                        	     8: COM_ACT_PD:	equ $4F		; Value for Page Down
                        	     9: COM_ACT_PROG:	equ $60		; Value for Program
                        	    10: COM_ACT_DIRIN:	equ $50		; Value for Entering a Dir (Not in v0)
                        	    11: COM_ACT_DIROUT:	equ $5F		; Value for Backing out of a Dir (Not in v0)
                        	    12: 

Source: "./main.asm"
                        	     9: 
                        	    10: 	include "CART_HEADER.asm"

Source: "CART_HEADER.asm"
                        	     1: ;;; Header for the Cartridge to be recognised by the MSX
                        	     2: 	
                        	     3: 	org ORGADDR
                        	     4: 				
00:4000 4142            	     5: 	db "AB"
00:4002 2F44            	     6: 	dw Init
00:4004 0000            	     7: 	dw 0, 0, 0, 0, 0, 0
00:4006 0000
00:4008 0000
00:400A 0000
00:400C 0000
00:400E 0000
                        	     8: 

Source: "./main.asm"
                        	    11: 
                        	    12: 	include "VRAM_BUFFER.asm"

Source: "VRAM_BUFFER.asm"
                        	     1: VRAM_BUFFER:
00:4010 C6              	     2: 	db $c6,"  File                 ",$c6,"   Size    V0.1"
00:4011 202046696C652020
00:4019 2020202020202020
00:4021 20202020202020
00:4028 C6
00:4029 20202053697A6520
00:4031 20202056302E31
00:4038 C3              	     3: 	db $c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3
00:4039 C3
00:403A C3
00:403B C3
00:403C C3
00:403D C3
00:403E C3
00:403F C3
00:4040 C3
00:4041 C3
00:4042 C3
00:4043 C3
00:4044 C3
00:4045 C3
00:4046 C3
00:4047 C3
00:4048 C3
00:4049 C3
00:404A C3
00:404B C3
00:404C C3
00:404D C3
00:404E C3
00:404F C3
00:4050 C3
00:4051 C3
00:4052 C3
00:4053 C3
00:4054 C3
00:4055 C3
00:4056 C3
00:4057 C3
00:4058 C3
00:4059 C3
00:405A C3
00:405B 00
00:405C 00
00:405D 00
00:405E 00
00:405F 00
00:4060 CF              	     4: 	db $CF,"10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4061 3130205961726420
00:4069 4669676874202831
00:4071 39383629202020
00:4078 C6
00:4079 202020386B622020
00:4081 20202020202020
00:4088 2031302059617264	     5: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4090 2046696768742028
00:4098 3139383629202020
00:40A0 C6
00:40A1 202020386B622020
00:40A9 20202020202020
00:40B0 2031302059617264	     6: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:40B8 2046696768742028
00:40C0 3139383629202020
00:40C8 C6
00:40C9 202020386B622020
00:40D1 20202020202020
00:40D8 2031302059617264	     7: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:40E0 2046696768742028
00:40E8 3139383629202020
00:40F0 C6
00:40F1 202020386B622020
00:40F9 20202020202020
00:4100 2031302059617264	     8: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4108 2046696768742028
00:4110 3139383629202020
00:4118 C6
00:4119 202020386B622020
00:4121 20202020202020
00:4128 2031302059617264	     9: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4130 2046696768742028
00:4138 3139383629202020
00:4140 C6
00:4141 202020386B622020
00:4149 20202020202020
00:4150 2031302059617264	    10: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4158 2046696768742028
00:4160 3139383629202020
00:4168 C6
00:4169 202020386B622020
00:4171 20202020202020
00:4178 2031393432202831	    11: 	db " 1942 (1986)(ASCII)(J   ",$c6,"   8kb         "
00:4180 3938362928415343
00:4188 494929284A202020
00:4190 C6
00:4191 202020386B622020
00:4199 20202020202020
00:41A0 2031393432202831	    12: 	db " 1942 (1987)(Zemina)(   ",$c6,"   8kb         "
00:41A8 39383729285A656D
00:41B0 696E612928202020
00:41B8 C6
00:41B9 202020386B622020
00:41C1 20202020202020
00:41C8 20334420476F6C66	    13: 	db " 3D Golf Simulation -   ",$c6,"  16kb         "
00:41D0 2053696D756C6174
00:41D8 696F6E202D202020
00:41E0 C6
00:41E1 202031366B622020
00:41E9 20202020202020
00:41F0 20334420476F6C66	    14: 	db " 3D Golf Simulation -   ",$c6,"  32kb         "
00:41F8 2053696D756C6174
00:4200 696F6E202D202020
00:4208 C6
00:4209 202033326B622020
00:4211 20202020202020
00:4218 2033442054656E6E	    15: 	db " 3D Tennis (1983)(ASC   ",$c6,"  32kb         "
00:4220 6973202831393833
00:4228 2928415343202020
00:4230 C6
00:4231 202033326B622020
00:4239 20202020202020
00:4240 2033442057617465	    16: 	db " 3D Water Driver (198   ",$c6,"  64kb         "
00:4248 7220447269766572
00:4250 2028313938202020
00:4258 C6
00:4259 202036346B622020
00:4261 20202020202020
00:4268 2041204C69666520	    17: 	db " A Life M36 Planet -    ",$c6,"  64kb         "
00:4270 4D333620506C616E
00:4278 6574202D20202020
00:4280 C6
00:4281 202036346B622020
00:4289 20202020202020
00:4290 20412E452E202831	    18: 	db " A.E. (1983)(Toshiba-   ",$c6,"  64kb         "
00:4298 3938332928546F73
00:42A0 686962612D202020
00:42A8 C6
00:42A9 202036346B622020
00:42B1 20202020202020
00:42B8 2041312053706972	    19: 	db " A1 Spirit - The Way    ",$c6," 128kb         "
00:42C0 6974202D20546865
00:42C8 2057617920202020
00:42D0 C6
00:42D1 203132386B622020
00:42D9 20202020202020
00:42E0 204163746D616E20	    20: 	db " Actman (1984)(ASCII)   ",$c6," 128kb         "
00:42E8 2831393834292841
00:42F0 5343494929202020
00:42F8 C6
00:42F9 203132386B622020
00:4301 20202020202020
00:4308 20416476656E2763	    21: 	db " Adven'chuta! (1983)(   ",$c6," 128kb         "
00:4310 6875746121202831
00:4318 3938332928202020
00:4320 C6
00:4321 203132386B622020
00:4329 20202020202020
00:4330 20416C63617A6172	    22: 	db " Alcazar - The Forgot   ",$c6," 128kb         "
00:4338 202D205468652046
00:4340 6F72676F74202020
00:4348 C6
00:4349 203132386B622020
00:4351 20202020202020
00:4358 20416C6962616261	    23: 	db " Alibaba and 40 Thiev   ",$c6," 256kb         "
00:4360 20616E6420343020
00:4368 5468696576202020
00:4370 C6
00:4371 203235366B622020
00:4379 20202020202020
00:4380 20416C69656E2038	    24: 	db " Alien 8 (1985)(Ultim   ",$c6," 256kb         "
00:4388 2028313938352928
00:4390 556C74696D202020
00:4398 C6
00:4399 203235366B622020
00:43A1 20202020202020
00:43A8 2020202020202020	    25: 	db "                         Page 1/300     "
00:43B0 2020202020202020
00:43B8 2020202020202020
00:43C0 205061676520312F
00:43C8 3330302020202020
                        	    26: VRAM_BUFFER_END:
00:43D0 00              	    27: 	nop
                        	    28: 

Source: "./main.asm"
                        	    13: 	
                        	    14: TOTAL_PAGES:
00:43D1 1E00            	    15: 	dw 30
                        	    16: 
                        	    17: 	include "CURSOR_FUNCTIONS.asm"

Source: "CURSOR_FUNCTIONS.asm"
                        	     1: IncrementCursor:
00:43D3 2A01C0          	     2: 	ld hl, (CUR_INDEX)
00:43D6 7D              	     3: 	ld a, l
00:43D7 3202C0          	     4: 	ld (OLD_CUR_INDEX),a
00:43DA 23              	     5: 	inc hl
00:43DB 7D              	     6: 	ld a, l
00:43DC FE15            	     7: 	cp $15
00:43DE CC2A44          	     8: 	call z, ZeroCursor
00:43E1 3201C0          	     9: 	ld (CUR_INDEX), a
00:43E4 CD0344          	    10: 	call UpdateCursor
00:43E7 CD4E44          	    11: 	call CopyWorkBufferToVRAM
00:43EA C9              	    12: 	ret
                        	    13: 
                        	    14: DecrementCursor:
00:43EB 2A01C0          	    15: 	ld hl, (CUR_INDEX)
00:43EE 7D              	    16: 	ld a, l
00:43EF 3202C0          	    17: 	ld (OLD_CUR_INDEX),a
00:43F2 2B              	    18: 	dec hl
00:43F3 7D              	    19: 	ld a, l
00:43F4 FEFF            	    20: 	cp $FF
00:43F6 CC2C44          	    21: 	call z, ClampCursor
00:43F9 3201C0          	    22: 	ld (CUR_INDEX), a
00:43FC CD0344          	    23: 	call UpdateCursor
00:43FF CD4E44          	    24: 	call CopyWorkBufferToVRAM
00:4402 C9              	    25: 	ret
                        	    26: 
                        	    27: UpdateCursor:
                        	    28: 	;; First we Add the new cursor to the Buffer
                        	    29: 	;; We load the CUR_SEL into de, and multiply it by 40
                        	    30: 	;; to get the row we are on
00:4403 3A01C0          	    31: 	ld a, (CUR_INDEX)
00:4406 67              	    32: 	ld h, a
00:4407 1E28            	    33: 	ld e, 40
00:4409 CD6844          	    34: 	call Mult8x8
                        	    35: 	;; We then add the base address of the Buffer to the HL result
00:440C 1100C1          	    36: 	ld de, VRM_WRK_AREA
00:440F 19              	    37: 	add hl, de
                        	    38: 	;; We finally add a standard offset of 80 to get it started on the right row
00:4410 115000          	    39: 	ld de, 80
00:4413 19              	    40: 	add hl, de
                        	    41: 	;; We then Write the character to the location in RAM
00:4414 36CF            	    42: 	ld (hl), POINTER_CODE
                        	    43: 	;; We repeat for Clearing the OLD_SEL_INDEX
00:4416 3A02C0          	    44: 	ld a, (OLD_CUR_INDEX)
00:4419 67              	    45: 	ld h, a
00:441A 1E28            	    46: 	ld e, 40
00:441C CD6844          	    47: 	call Mult8x8
00:441F 1100C1          	    48: 	ld de, VRM_WRK_AREA
00:4422 19              	    49: 	add hl, de
00:4423 115000          	    50: 	ld de, 80
00:4426 19              	    51: 	add hl, de
00:4427 3620            	    52: 	ld (hl), SPACE_CODE
00:4429 C9              	    53: 	ret
                        	    54: 
                        	    55: ZeroCursor:
00:442A AF              	    56: 	xor a
00:442B C9              	    57: 	ret
                        	    58: 
                        	    59: ClampCursor:
00:442C 3E14            	    60: 	ld a, $14
00:442E C9              	    61: 	ret
                        	    62: 

Source: "./main.asm"
                        	    18: 				; ==[ Program ]=============================================
                        	    19: Init:
                        	    20: 	;; Set Screen Mode to 0
00:442F CD6C00          	    21: 	call INITXT
                        	    22: 	;; Set Pallette to White on Black
00:4432 3E01            	    23: 	ld a, 1
00:4434 32EAF3          	    24: 	ld (BAKCLR), a
00:4437 32EBF3          	    25: 	ld (BDCLR), a
00:443A 3E00            	    26: 	ld a, 0
00:443C 3201C0          	    27: 	ld (CUR_INDEX),a
00:443F 3202C0          	    28: 	ld (OLD_CUR_INDEX),a
00:4442 CD6200          	    29: 	call CHGCLR
                        	    30: 	;; Copy the VRAM_BUFFER to RAM so that we can update it
00:4445 CD5C44          	    31: 	call CopyBufferToRam
                        	    32: 	;; Copy the VRAM_BUFFER in RAM to VRAM
00:4448 CD4E44          	    33: 	call CopyWorkBufferToVRAM
00:444B CD9A44          	    34: 	call MainLoop
                        	    35: 
                        	    36: CopyWorkBufferToVRAM:
00:444E 01C003          	    37: 	ld bc, 960
00:4451 ED5BB3F3        	    38: 	ld de, (TXTNAM)
00:4455 2100C1          	    39: 	ld hl, VRM_WRK_AREA
00:4458 CD5C00          	    40: 	call LDIRVM
00:445B C9              	    41: 	ret
                        	    42: 	
                        	    43: CopyBufferToRam:
00:445C 211040          	    44: 	ld hl, VRAM_BUFFER
00:445F 1100C1          	    45: 	ld de, VRM_WRK_AREA
00:4462 01C003          	    46: 	ld bc, 960
00:4465 EDB0            	    47: 	ldir
00:4467 C9              	    48: 	ret
                        	    49: 	
                        	    50: 
                        	    51: 
                        	    52: ;;; Mult h by e and place in hl
                        	    53: Mult8x8:
00:4468 1600            	    54: 	ld d, 0
00:446A CB24            	    55: 	sla h
00:446C 9F              	    56: 	sbc a, a
00:446D A3              	    57: 	and e
00:446E 6F              	    58: 	ld l,a
00:446F 0607            	    59: 	ld b, 7
                        	    60: Mult8_8_loop:
00:4471 29              	    61: 	add hl, hl
00:4472 3001            	    62: 	jr nc, $+3
00:4474 19              	    63: 	add hl, de
00:4475 10FA            	    64: 	djnz Mult8_8_loop
00:4477 C9              	    65: 	ret
                        	    66: ;;; Mult DE by A and store Result in AHL
                        	    67: Mult8x16:
00:4478 0E00            	    68: 	ld c, 0
00:447A 61              	    69: 	ld h, c
00:447B 6C              	    70: 	ld l, h
00:447C 87              	    71: 	add a, a
00:447D 3002            	    72: 	jr nc, $+4
00:447F 62              	    73: 	ld h,d
00:4480 6B              	    74: 	ld l,e
00:4481 0607            	    75: 	ld b,7
                        	    76: Mult8_16_loop:
00:4483 29              	    77: 	add hl, hl
00:4484 17              	    78: 	rla
00:4485 3002            	    79: 	jr nc, $+4
00:4487 19              	    80: 	add hl, de
00:4488 89              	    81: 	adc a, c
00:4489 10F8            	    82: 	djnz Mult8_16_loop
00:448B C9              	    83: 	ret
                        	    84: 	
                        	    85: 	
                        	    86: CheckInput:
00:448C CD9F00          	    87: 	call CHGET
00:448F FE1E            	    88: 	cp 30
00:4491 CCEB43          	    89: 	call z, DecrementCursor
00:4494 FE1F            	    90: 	cp 31
00:4496 CCD343          	    91: 	call z, IncrementCursor
00:4499 C9              	    92: 	ret
                        	    93: 
                        	    94: MainLoop:
00:449A F3              	    95: 	di
00:449B CD8C44          	    96: 	call CheckInput
00:449E 18FA            	    97: 	jr MainLoop
                        	    98: 		
                        	    99: 


Symbols by name:
BAKCLR                           E:F3EA
BDCLR                            E:F3EB
CheckInput                       A:448C
CHGCLR                           E:0062
CHGET                            E:009F
ClampCursor                      A:442C
CopyBufferToRam                  A:445C
CopyWorkBufferToVRAM             A:444E
CUR_INDEX                        E:C001
DecrementCursor                  A:43EB
IncrementCursor                  A:43D3
Init                             A:442F
INITXT                           E:006C
LDIRVM                           E:005C
MainLoop                         A:449A
Mult8_16_loop                    A:4483
Mult8_8_loop                     A:4471
Mult8x16                         A:4478
Mult8x8                          A:4468
OLD_CUR_INDEX                    E:C002
ORGADDR                          E:4000
POINTER_CODE                     E:00CF
SPACE_CODE                       E:0020
TOTAL_PAGES                      A:43D1
TXTNAM                           E:F3B3
UpdateCursor                     A:4403
VRAM_BUFFER                      A:4010
VRAM_BUFFER_END                  A:43D0
VRM_WRK_AREA                     E:C100
ZeroCursor                       A:442A

Symbols by value:
0020 SPACE_CODE
005C LDIRVM
0062 CHGCLR
006C INITXT
009F CHGET
00CF POINTER_CODE
4000 ORGADDR
4010 VRAM_BUFFER
43D0 VRAM_BUFFER_END
43D1 TOTAL_PAGES
43D3 IncrementCursor
43EB DecrementCursor
4403 UpdateCursor
442A ZeroCursor
442C ClampCursor
442F Init
444E CopyWorkBufferToVRAM
445C CopyBufferToRam
4468 Mult8x8
4471 Mult8_8_loop
4478 Mult8x16
4483 Mult8_16_loop
448C CheckInput
449A MainLoop
C001 CUR_INDEX
C002 OLD_CUR_INDEX
C100 VRM_WRK_AREA
F3B3 TXTNAM
F3EA BAKCLR
F3EB BDCLR

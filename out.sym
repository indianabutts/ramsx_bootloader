Sections:
00: "seg4000" (4000-44E4)


Source: "./main.asm"
                        	     1: 				; ==[ Constants ]============================================
                        	     2: 
                        	     3: 
                        	     4: 	include "SYS_BIOSCALLS.asm"

Source: "SYS_BIOSCALLS.asm"
                        	     1: ;;; MSX BIOS Calls
                        	     2: ;;; Information from : http://map.grauw.nl/resources/msxbios.php
                        	     3: 
                        	     4: 
                        	     5: ;;; ====================================================
                        	     6: ;;; Block Transfer to VRAM from memory
                        	     7: ;;; Inputs:
                        	     8: ;;;       BC - Block Length
                        	     9: ;;;       DE - Start of VRAM
                        	    10: ;;;       HL - Start address of memory
                        	    11: ;;;       Registers: All
                        	    12: ;;; ====================================================
                        	    13: LDIRVM: equ $005C
                        	    14: 
                        	    15: ;;; ====================================================
                        	    16: ;;; Changes the screen colors
                        	    17: ;;; Inputs:
                        	    18: ;;;       Foreground Color in FORCLR
                        	    19: ;;;       Background Color in BAKCLR
                        	    20: ;;;       Border Color in BDRCLR
                        	    21: ;;;       Registers: All
                        	    22: ;;; ====================================================
                        	    23: CHGCLR:	equ $0062
                        	    24: 
                        	    25: ;;; ====================================================
                        	    26: ;;; Clears the screen
                        	    27: ;;; Inputs:
                        	    28: ;;;       Foreground Color in FORCLR
                        	    29: ;;;       Background Color in BAKCLR
                        	    30: ;;;       Border Color in BDRCLR
                        	    31: ;;;       Registers: All
                        	    32: ;;; ====================================================
                        	    33: CLS:	equ $00C3
                        	    34: 
                        	    35: ;;; ====================================================
                        	    36: ;;; Switches to SCREEN 0 (text screen with 40Ã—24 characters)Clears the screen
                        	    37: ;;; Inputs:
                        	    38: ;;;       TXTNAM
                        	    39: ;;;       TXTCGP
                        	    40: ;;;       Registers: All
                        	    41: ;;; ====================================================
                        	    42: INITXT:	equ #006C
                        	    43: 
                        	    44: ;;; ====================================================
                        	    45: ;;; One character input (waiting)
                        	    46: ;;; Output:
                        	    47: ;;;       A - ASCII Code of the input character
                        	    48: ;;;       Registers: AF
                        	    49: ;;; ====================================================	
                        	    50: CHGET equ $009F
                        	    51: 
                        	    52: ;;; ====================================================
                        	    53: ;;; Returns the value of the specified line from the keyboard matrix
                        	    54: ;;; Input:
                        	    55: ;;; 	  A - The specified line 
                        	    56: ;;; Output:
                        	    57: ;;;       A - Data with Key Press represented as 0
                        	    58: ;;;       Registers: AF
                        	    59: ;;; ====================================================	
                        	    60: SNSMAT equ $0141
                        	    61: 

Source: "./main.asm"
                        	     5: 	include "SYS_VARIABLES.asm"

Source: "SYS_VARIABLES.asm"
                        	     1: ;;; MSX System Variables
                        	     2: ;;; Information from : https://map.grauw.nl/resources/msxsystemvars.php
                        	     3: 	
                        	     4: FORCLR:	equ $F3E9		; Foreground Color - 1 byte
                        	     5: 
                        	     6: BAKCLR:	equ $F3EA		; Background Color - 1 byte
                        	     7: 
                        	     8: BDCLR:	equ $F3EB 		; Border Color - 1 byte
                        	     9: 
                        	    10: TXTNAM:	equ $F3B3
                        	    11: 

Source: "./main.asm"
                        	     6: 	include "CHAR_CODES.asm"

Source: "CHAR_CODES.asm"
                        	     1: ;;; Character codes for both input and output
                        	     2: 
                        	     3: RIGHT_CODE:	equ $1C
                        	     4: LEFT_CODE:	equ $1D	
                        	     5: UP_CODE:	equ $1E
                        	     6: DOWN_CODE:	equ $1F
                        	     7: SPACE_CODE:	equ $20
                        	     8: POINTER_CODE:	equ $CF
                        	     9: 
                        	    10: 

Source: "./main.asm"
                        	     7: 	include "CURSOR_VARIABLES.asm"

Source: "CURSOR_VARIABLES.asm"
                        	     1: CUR_INDEX:	equ $C001	; Current index of the Cursor
                        	     2: OLD_CUR_INDEX:	equ $C002	; The last index of the Cursor
                        	     3: CUR_GAME:	equ $C003	; The game that was selected
                        	     4: CUR_PAGE:	equ $C004	; The page number
                        	     5: 

Source: "./main.asm"
                        	     8: 	include "VRAM_VARIABLES.asm"

Source: "VRAM_VARIABLES.asm"
                        	     1: VRM_WRK_AREA:	equ $C100	; Base address for the RAM copy of the VRAM Buffer
                        	     2: 

Source: "./main.asm"
                        	     9: 	include "INPUT_VARIABLES.asm"

Source: "INPUT_VARIABLES.asm"
                        	     1: INPUT_NAV_STATE:	equ $C020
                        	     2: INPUT_NAV_PREV_STATE:	equ $C022
                        	     3: INPUT_CUR_REP_COUNT:	equ $C023
                        	     4: 

Source: "./main.asm"
                        	    10: 	include "MAIN_CONSTANTS.asm"

Source: "MAIN_CONSTANTS.asm"
                        	     1: ORGADDR	equ $4000	; Origin for the ROM
                        	     2: 

Source: "./main.asm"
                        	    11: 	include "COMMAND_CONSTANTS.asm"

Source: "COMMAND_CONSTANTS.asm"
                        	     1: COM_ACTION_REG:	equ $6FF0	; The command is written here for the Firmware to read
                        	     2: COM_INDEX_REG:	equ $6FF1	; The index for the ROM to load in the current page
                        	     3: COM_ACK_REG:	equ $6FFE	; The Firmware will write the ACK value here for Bootloader to check
                        	     4: COM_START:	equ $7000	; Addresses from 0x7000 to 0x7FFF will trigger the command flow on the Firmware
                        	     5: 
                        	     6: COM_ACT_PU:	equ $40		; Value for Page Up
                        	     7: COM_ACT_PD:	equ $4F		; Value for Page Down
                        	     8: COM_ACT_PROG:	equ $60		; Value for Program
                        	     9: COM_ACT_DIRIN:	equ $50		; Value for Entering a Dir (Not in v0)
                        	    10: COM_ACT_DIROUT:	equ $5F		; Value for Backing out of a Dir (Not in v0)
                        	    11: 

Source: "./main.asm"
                        	    12: 	include "INPUT_CONSTANTS.asm"

Source: "INPUT_CONSTANTS.asm"
                        	     1: INPUT_NAV_ROW:		equ 8
                        	     2: INPUT_COM_ROW:		equ 5
                        	     3: INPUT_REP_COUNT:	equ 100
                        	     4: 
                        	     5: 

Source: "./main.asm"
                        	    13: 
                        	    14: 	include "CART_HEADER.asm"

Source: "CART_HEADER.asm"
                        	     1: ;;; Header for the Cartridge to be recognised by the MSX
                        	     2: 	
                        	     3: 	org ORGADDR
                        	     4: 				
00:4000 4142            	     5: 	db "AB"
00:4002 AE44            	     6: 	dw Init
00:4004 0000            	     7: 	dw 0, 0, 0, 0, 0, 0
00:4006 0000
00:4008 0000
00:400A 0000
00:400C 0000
00:400E 0000
                        	     8: 

Source: "./main.asm"
                        	    15: 
                        	    16: 	include "VRAM_BUFFER.asm"

Source: "VRAM_BUFFER.asm"
                        	     1: VRAM_BUFFER:
00:4010 C6              	     2: 	db $c6,"  File                 ",$c6,"   Size    V0.1"
00:4011 202046696C652020
00:4019 2020202020202020
00:4021 20202020202020
00:4028 C6
00:4029 20202053697A6520
00:4031 20202056302E31
00:4038 C3              	     3: 	db $c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3
00:4039 C3
00:403A C3
00:403B C3
00:403C C3
00:403D C3
00:403E C3
00:403F C3
00:4040 C3
00:4041 C3
00:4042 C3
00:4043 C3
00:4044 C3
00:4045 C3
00:4046 C3
00:4047 C3
00:4048 C3
00:4049 C3
00:404A C3
00:404B C3
00:404C C3
00:404D C3
00:404E C3
00:404F C3
00:4050 C3
00:4051 C3
00:4052 C3
00:4053 C3
00:4054 C3
00:4055 C3
00:4056 C3
00:4057 C3
00:4058 C3
00:4059 C3
00:405A C3
00:405B 00
00:405C 00
00:405D 00
00:405E 00
00:405F 00
00:4060 CF              	     4: 	db $CF,"10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4061 3130205961726420
00:4069 4669676874202831
00:4071 39383629202020
00:4078 C6
00:4079 202020386B622020
00:4081 20202020202020
00:4088 2031302059617264	     5: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4090 2046696768742028
00:4098 3139383629202020
00:40A0 C6
00:40A1 202020386B622020
00:40A9 20202020202020
00:40B0 2031302059617264	     6: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:40B8 2046696768742028
00:40C0 3139383629202020
00:40C8 C6
00:40C9 202020386B622020
00:40D1 20202020202020
00:40D8 2031302059617264	     7: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:40E0 2046696768742028
00:40E8 3139383629202020
00:40F0 C6
00:40F1 202020386B622020
00:40F9 20202020202020
00:4100 2031302059617264	     8: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4108 2046696768742028
00:4110 3139383629202020
00:4118 C6
00:4119 202020386B622020
00:4121 20202020202020
00:4128 2031302059617264	     9: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4130 2046696768742028
00:4138 3139383629202020
00:4140 C6
00:4141 202020386B622020
00:4149 20202020202020
00:4150 2031302059617264	    10: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4158 2046696768742028
00:4160 3139383629202020
00:4168 C6
00:4169 202020386B622020
00:4171 20202020202020
00:4178 2031393432202831	    11: 	db " 1942 (1986)(ASCII)(J   ",$c6,"   8kb         "
00:4180 3938362928415343
00:4188 494929284A202020
00:4190 C6
00:4191 202020386B622020
00:4199 20202020202020
00:41A0 2031393432202831	    12: 	db " 1942 (1987)(Zemina)(   ",$c6,"   8kb         "
00:41A8 39383729285A656D
00:41B0 696E612928202020
00:41B8 C6
00:41B9 202020386B622020
00:41C1 20202020202020
00:41C8 20334420476F6C66	    13: 	db " 3D Golf Simulation -   ",$c6,"  16kb         "
00:41D0 2053696D756C6174
00:41D8 696F6E202D202020
00:41E0 C6
00:41E1 202031366B622020
00:41E9 20202020202020
00:41F0 20334420476F6C66	    14: 	db " 3D Golf Simulation -   ",$c6,"  32kb         "
00:41F8 2053696D756C6174
00:4200 696F6E202D202020
00:4208 C6
00:4209 202033326B622020
00:4211 20202020202020
00:4218 2033442054656E6E	    15: 	db " 3D Tennis (1983)(ASC   ",$c6,"  32kb         "
00:4220 6973202831393833
00:4228 2928415343202020
00:4230 C6
00:4231 202033326B622020
00:4239 20202020202020
00:4240 2033442057617465	    16: 	db " 3D Water Driver (198   ",$c6,"  64kb         "
00:4248 7220447269766572
00:4250 2028313938202020
00:4258 C6
00:4259 202036346B622020
00:4261 20202020202020
00:4268 2041204C69666520	    17: 	db " A Life M36 Planet -    ",$c6,"  64kb         "
00:4270 4D333620506C616E
00:4278 6574202D20202020
00:4280 C6
00:4281 202036346B622020
00:4289 20202020202020
00:4290 20412E452E202831	    18: 	db " A.E. (1983)(Toshiba-   ",$c6,"  64kb         "
00:4298 3938332928546F73
00:42A0 686962612D202020
00:42A8 C6
00:42A9 202036346B622020
00:42B1 20202020202020
00:42B8 2041312053706972	    19: 	db " A1 Spirit - The Way    ",$c6," 128kb         "
00:42C0 6974202D20546865
00:42C8 2057617920202020
00:42D0 C6
00:42D1 203132386B622020
00:42D9 20202020202020
00:42E0 204163746D616E20	    20: 	db " Actman (1984)(ASCII)   ",$c6," 128kb         "
00:42E8 2831393834292841
00:42F0 5343494929202020
00:42F8 C6
00:42F9 203132386B622020
00:4301 20202020202020
00:4308 20416476656E2763	    21: 	db " Adven'chuta! (1983)(   ",$c6," 128kb         "
00:4310 6875746121202831
00:4318 3938332928202020
00:4320 C6
00:4321 203132386B622020
00:4329 20202020202020
00:4330 20416C63617A6172	    22: 	db " Alcazar - The Forgot   ",$c6," 128kb         "
00:4338 202D205468652046
00:4340 6F72676F74202020
00:4348 C6
00:4349 203132386B622020
00:4351 20202020202020
00:4358 20416C6962616261	    23: 	db " Alibaba and 40 Thiev   ",$c6," 256kb         "
00:4360 20616E6420343020
00:4368 5468696576202020
00:4370 C6
00:4371 203235366B622020
00:4379 20202020202020
00:4380 20416C69656E2038	    24: 	db " Alien 8 (1985)(Ultim   ",$c6," 256kb         "
00:4388 2028313938352928
00:4390 556C74696D202020
00:4398 C6
00:4399 203235366B622020
00:43A1 20202020202020
00:43A8 2020202020202020	    25: 	db "                       Page   1/300     "
00:43B0 2020202020202020
00:43B8 2020202020202050
00:43C0 616765202020312F
00:43C8 3330302020202020
                        	    26: VRAM_BUFFER_END:
00:43D0 00              	    27: 	nop
                        	    28: 

Source: "./main.asm"
                        	    17: 	
                        	    18: TOTAL_PAGES:
00:43D1 1E00            	    19: 	dw 30
                        	    20: 
                        	    21: 	include "CURSOR_FUNCTIONS.asm"

Source: "CURSOR_FUNCTIONS.asm"
                        	     1: 	include "CURSOR_CONSTANTS.asm"

Source: "CURSOR_CONSTANTS.asm"
                        	     1: CUR_ROW_LENGTH:	equ 40
                        	     2: CUR_ROW_OFFSET:	equ 40*2
                        	     3: 	
                        	     4: 

Source: "CURSOR_FUNCTIONS.asm"
                        	     2: 
                        	     3: Cursor_CheckInput:
00:43D3 2A20C0          	     4: 	ld hl,(INPUT_NAV_STATE)
00:43D6 7C              	     5: 	ld a, h
00:43D7 2A22C0          	     6: 	ld hl, (INPUT_NAV_PREV_STATE)
00:43DA 44              	     7: 	ld b, h
00:43DB B8              	     8: 	cp b
00:43DC 280B            	     9: 	jr z, _Cursor_CheckInput_HeldInput 
00:43DE FEDF            	    10: 	cp $DF
00:43E0 CC0244          	    11: 	call z, Cursor_DecrementIndex
00:43E3 FEBF            	    12: 	cp $BF
00:43E5 CCEA43          	    13: 	call z, Cursor_IncrementIndex
00:43E8 C9              	    14: 	ret
                        	    15: _Cursor_CheckInput_HeldInput:
00:43E9 C9              	    16: 	ret
                        	    17: 	
                        	    18: 	
                        	    19: Cursor_IncrementIndex:
00:43EA 2A01C0          	    20: 	ld hl, (CUR_INDEX)
00:43ED 7D              	    21: 	ld a, l
00:43EE 3202C0          	    22: 	ld (OLD_CUR_INDEX),a
00:43F1 23              	    23: 	inc hl
00:43F2 7D              	    24: 	ld a, l
00:43F3 FE15            	    25: 	cp $15
00:43F5 CC4044          	    26: 	call z, _Cursor_ZeroIndex
00:43F8 3201C0          	    27: 	ld (CUR_INDEX), a
00:43FB CD1A44          	    28: 	call _Cursor_UpdateScreenPosition
00:43FE CD4544          	    29: 	call CopyWorkBufferToVRAM
00:4401 C9              	    30: 	ret
                        	    31: 
                        	    32: Cursor_DecrementIndex:
00:4402 2A01C0          	    33: 	ld hl, (CUR_INDEX)
00:4405 7D              	    34: 	ld a, l
00:4406 3202C0          	    35: 	ld (OLD_CUR_INDEX),a
00:4409 2B              	    36: 	dec hl
00:440A 7D              	    37: 	ld a, l
00:440B FEFF            	    38: 	cp $FF
00:440D CC4244          	    39: 	call z, _Cursor_ClampIndex
00:4410 3201C0          	    40: 	ld (CUR_INDEX), a
00:4413 CD1A44          	    41: 	call _Cursor_UpdateScreenPosition
00:4416 CD4544          	    42: 	call CopyWorkBufferToVRAM
00:4419 C9              	    43: 	ret
                        	    44: 
                        	    45: _Cursor_UpdateScreenPosition:
                        	    46: 	;; First we Add the new cursor to the Buffer
                        	    47: 	;; We load the CUR_SEL into de, and multiply it by 40
                        	    48: 	;; to get the row we are on
00:441A 3A01C0          	    49: 	ld a, (CUR_INDEX)
00:441D 67              	    50: 	ld h, a
00:441E 1E28            	    51: 	ld e, CUR_ROW_LENGTH
00:4420 CD5F44          	    52: 	call Mult8x8
                        	    53: 	;; We then add the base address of the Buffer to the HL result
00:4423 1100C1          	    54: 	ld de, VRM_WRK_AREA
00:4426 19              	    55: 	add hl, de
                        	    56: 	;; We finally add a standard offset of 80 to get it started on the right row
00:4427 115000          	    57: 	ld de, CUR_ROW_OFFSET
00:442A 19              	    58: 	add hl, de
                        	    59: 	;; We then Write the character to the location in RAM
00:442B 36CF            	    60: 	ld (hl), POINTER_CODE
                        	    61: 	;; We repeat for Clearing the OLD_SEL_INDEX
00:442D 3A02C0          	    62: 	ld a, (OLD_CUR_INDEX)
00:4430 67              	    63: 	ld h, a
00:4431 1E28            	    64: 	ld e, CUR_ROW_LENGTH
00:4433 CD5F44          	    65: 	call Mult8x8
00:4436 1100C1          	    66: 	ld de, VRM_WRK_AREA
00:4439 19              	    67: 	add hl, de
00:443A 115000          	    68: 	ld de, CUR_ROW_OFFSET
00:443D 19              	    69: 	add hl, de
00:443E 3620            	    70: 	ld (hl), SPACE_CODE
                        	    71: 
                        	    72: _Cursor_ZeroIndex:
00:4440 AF              	    73: 	xor a
00:4441 C9              	    74: 	ret
                        	    75: 
                        	    76: _Cursor_ClampIndex:
00:4442 3E14            	    77: 	ld a, $14
00:4444 C9              	    78: 	ret
                        	    79: 

Source: "./main.asm"
                        	    22: 	include "VRAM_FUNCTIONS.asm"

Source: "VRAM_FUNCTIONS.asm"
                        	     1: ;;; TODO: Comment these functions
                        	     2: 	
                        	     3: CopyWorkBufferToVRAM:
00:4445 01C003          	     4: 	ld bc, 960
00:4448 ED5BB3F3        	     5: 	ld de, (TXTNAM)
00:444C 2100C1          	     6: 	ld hl, VRM_WRK_AREA
00:444F CD5C00          	     7: 	call LDIRVM
00:4452 C9              	     8: 	ret
                        	     9: 	
                        	    10: CopyBufferToRam:
00:4453 211040          	    11: 	ld hl, VRAM_BUFFER
00:4456 1100C1          	    12: 	ld de, VRM_WRK_AREA
00:4459 01C003          	    13: 	ld bc, 960
00:445C EDB0            	    14: 	ldir
00:445E C9              	    15: 	ret
                        	    16: 

Source: "./main.asm"
                        	    23: 	include "MATH_FUNCTIONS.asm"

Source: "MATH_FUNCTIONS.asm"
                        	     1: ;;; Mult h by e and place in hl
                        	     2: Mult8x8:
00:445F 1600            	     3: 	ld d, 0
00:4461 CB24            	     4: 	sla h
00:4463 9F              	     5: 	sbc a, a
00:4464 A3              	     6: 	and e
00:4465 6F              	     7: 	ld l,a
00:4466 0607            	     8: 	ld b, 7
                        	     9: _Mult8x8_Loop:
00:4468 29              	    10: 	add hl, hl
00:4469 3001            	    11: 	jr nc, $+3
00:446B 19              	    12: 	add hl, de
00:446C 10FA            	    13: 	djnz _Mult8x8_Loop
00:446E C9              	    14: 	ret
                        	    15: 
                        	    16: ;;; Mult DE by A and store Result in AHL
                        	    17: Mult8x16:
00:446F 0E00            	    18: 	ld c, 0
00:4471 61              	    19: 	ld h, c
00:4472 6C              	    20: 	ld l, h
00:4473 87              	    21: 	add a, a
00:4474 3002            	    22: 	jr nc, $+4
00:4476 62              	    23: 	ld h,d
00:4477 6B              	    24: 	ld l,e
00:4478 0607            	    25: 	ld b,7
                        	    26: _Mult8x16_Loop:
00:447A 29              	    27: 	add hl, hl
00:447B 17              	    28: 	rla
00:447C 3002            	    29: 	jr nc, $+4
00:447E 19              	    30: 	add hl, de
00:447F 89              	    31: 	adc a, c
00:4480 10F8            	    32: 	djnz _Mult8x16_Loop
00:4482 C9              	    33: 	ret
                        	    34: 

Source: "./main.asm"
                        	    24: 	include "INPUT_FUNCTIONS.asm"

Source: "INPUT_FUNCTIONS.asm"
                        	     1: Input_UpdateInputBuffers:	
                        	     2: 	;; Set Previous State to the last current state before check
00:4483 2A20C0          	     3: 	ld hl, (INPUT_NAV_STATE)
00:4486 2222C0          	     4: 	ld (INPUT_NAV_PREV_STATE), hl
                        	     5: 	;; Copy Previous State into B for Comparison later
                        	     6: 	
                        	     7: 	;; Call SNSMAT to get the state for the ROW
                        	     8: 	;; and store it in RAM
00:4489 3E08            	     9: 	ld a, INPUT_NAV_ROW
00:448B CD4101          	    10: 	call SNSMAT
00:448E 67              	    11: 	ld h, a
00:448F 3E05            	    12: 	ld a, INPUT_COM_ROW
00:4491 CD4101          	    13: 	call SNSMAT
00:4494 6F              	    14: 	ld l, a
00:4495 2220C0          	    15: 	ld (INPUT_NAV_STATE), hl
                        	    16: 	;; Compare New State in A with Previous State in B
00:4498 C9              	    17: 	ret
                        	    18: 	
                        	    19: _CheckNavInput_ClearRep
00:4499 3E00            	    20: 	ld a, 0
00:449B 3223C0          	    21: 	ld (INPUT_CUR_REP_COUNT), a
00:449E C9              	    22: 	ret
                        	    23: 	
                        	    24: IncrementInputRepeat:
00:449F 3A23C0          	    25: 	ld a, (INPUT_CUR_REP_COUNT)
00:44A2 3C              	    26: 	inc a
00:44A3 FE64            	    27: 	cp INPUT_REP_COUNT
00:44A5 2801            	    28: 	jr z, _IncrementInputRepeat_Threshold
00:44A7 C9              	    29: 	ret
                        	    30: _IncrementInputRepeat_Threshold:
00:44A8 3E00            	    31: 	ld a, 0
00:44AA 3223C0          	    32: 	ld (INPUT_CUR_REP_COUNT), a
00:44AD C9              	    33: 	ret
                        	    34: 	
                        	    35: 	;ld (
                        	    36: 	;cp $FF
                        	    37: 	;jr z,CheckNavInput
                        	    38: 	;;; Row 8 Has Sequence
                        	    39: 	;;; R, D, U, L
                        	    40: 	;;; Check for U = 11011111 (0xDF)
                        	    41: 	;cp $DF
                        	    42: 	;call z, DecrementCursor
                        	    43: 	;;; Check for D = 10111111 (0xBF)
                        	    44: 	;cp $BF
                        	    45: 	;call z, IncrementCursor
                        	    46: 	;ret
                        	    47: 
                        	    48: 

Source: "./main.asm"
                        	    25: 				; ==[ Program ]=============================================
                        	    26: Init:
                        	    27: 	;; Set Screen Mode to 0
00:44AE CD6C00          	    28: 	call INITXT
                        	    29: 	;; Set Pallette to White on Black
00:44B1 3E01            	    30: 	ld a, 1
00:44B3 32EAF3          	    31: 	ld (BAKCLR), a
00:44B6 32EBF3          	    32: 	ld (BDCLR), a
00:44B9 3E00            	    33: 	ld a, 0
00:44BB 3201C0          	    34: 	ld (CUR_INDEX),a
00:44BE 3202C0          	    35: 	ld (OLD_CUR_INDEX),a
00:44C1 CD6200          	    36: 	call CHGCLR
                        	    37: 	;; Copy the VRAM_BUFFER to RAM so that we can update it
00:44C4 CD5344          	    38: 	call CopyBufferToRam
                        	    39: 	;; Copy the VRAM_BUFFER in RAM to VRAM
00:44C7 CD4544          	    40: 	call CopyWorkBufferToVRAM
00:44CA CDDB44          	    41: 	call MainLoop
                        	    42: 
                        	    43: 
                        	    44: 
                        	    45: CheckBiosInput:
00:44CD CD9F00          	    46: 	call CHGET
00:44D0 FE1E            	    47: 	cp UP_CODE
00:44D2 CC0244          	    48: 	call z, Cursor_DecrementIndex
00:44D5 FE1F            	    49: 	cp DOWN_CODE
00:44D7 CC0244          	    50: 	call z, Cursor_DecrementIndex
00:44DA C9              	    51: 	ret
                        	    52: 
                        	    53: MainLoop:
00:44DB F3              	    54: 	di
00:44DC CD8344          	    55: 	call Input_UpdateInputBuffers
00:44DF CDD343          	    56: 	call Cursor_CheckInput
00:44E2 18F7            	    57: 	jr MainLoop
                        	    58: 		
                        	    59: 


Symbols by name:
_CheckNavInput_ClearRep          A:4499
_Cursor_CheckInput_HeldInput     A:43E9
_Cursor_ClampIndex               A:4442
_Cursor_UpdateScreenPosition     A:441A
_Cursor_ZeroIndex                A:4440
_IncrementInputRepeat_Threshold  A:44A8
_Mult8x16_Loop                   A:447A
_Mult8x8_Loop                    A:4468
BAKCLR                           E:F3EA
BDCLR                            E:F3EB
CheckBiosInput                   A:44CD
CHGCLR                           E:0062
CHGET                            E:009F
CopyBufferToRam                  A:4453
CopyWorkBufferToVRAM             A:4445
CUR_INDEX                        E:C001
CUR_ROW_LENGTH                   E:0028
CUR_ROW_OFFSET                   E:0050
Cursor_CheckInput                A:43D3
Cursor_DecrementIndex            A:4402
Cursor_IncrementIndex            A:43EA
DOWN_CODE                        E:001F
IncrementInputRepeat             A:449F
Init                             A:44AE
INITXT                           E:006C
INPUT_COM_ROW                    E:0005
INPUT_CUR_REP_COUNT              E:C023
INPUT_NAV_PREV_STATE             E:C022
INPUT_NAV_ROW                    E:0008
INPUT_NAV_STATE                  E:C020
INPUT_REP_COUNT                  E:0064
Input_UpdateInputBuffers         A:4483
LDIRVM                           E:005C
MainLoop                         A:44DB
Mult8x16                         A:446F
Mult8x8                          A:445F
OLD_CUR_INDEX                    E:C002
ORGADDR                          E:4000
POINTER_CODE                     E:00CF
SNSMAT                           E:0141
SPACE_CODE                       E:0020
TOTAL_PAGES                      A:43D1
TXTNAM                           E:F3B3
UP_CODE                          E:001E
VRAM_BUFFER                      A:4010
VRAM_BUFFER_END                  A:43D0
VRM_WRK_AREA                     E:C100

Symbols by value:
0005 INPUT_COM_ROW
0008 INPUT_NAV_ROW
001E UP_CODE
001F DOWN_CODE
0020 SPACE_CODE
0028 CUR_ROW_LENGTH
0050 CUR_ROW_OFFSET
005C LDIRVM
0062 CHGCLR
0064 INPUT_REP_COUNT
006C INITXT
009F CHGET
00CF POINTER_CODE
0141 SNSMAT
4000 ORGADDR
4010 VRAM_BUFFER
43D0 VRAM_BUFFER_END
43D1 TOTAL_PAGES
43D3 Cursor_CheckInput
43E9 _Cursor_CheckInput_HeldInput
43EA Cursor_IncrementIndex
4402 Cursor_DecrementIndex
441A _Cursor_UpdateScreenPosition
4440 _Cursor_ZeroIndex
4442 _Cursor_ClampIndex
4445 CopyWorkBufferToVRAM
4453 CopyBufferToRam
445F Mult8x8
4468 _Mult8x8_Loop
446F Mult8x16
447A _Mult8x16_Loop
4483 Input_UpdateInputBuffers
4499 _CheckNavInput_ClearRep
449F IncrementInputRepeat
44A8 _IncrementInputRepeat_Threshold
44AE Init
44CD CheckBiosInput
44DB MainLoop
C001 CUR_INDEX
C002 OLD_CUR_INDEX
C020 INPUT_NAV_STATE
C022 INPUT_NAV_PREV_STATE
C023 INPUT_CUR_REP_COUNT
C100 VRM_WRK_AREA
F3B3 TXTNAM
F3EA BAKCLR
F3EB BDCLR

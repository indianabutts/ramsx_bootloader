Sections:
00: "seg4000" (4000-4486)


Source: "./main.asm"
                        	     1: 				; ==[ Constants ]============================================
                        	     2: 
                        	     3: 
                        	     4: 	include "SYS_BIOSCALLS.asm"

Source: "SYS_BIOSCALLS.asm"
                        	     1: ;;; MSX BIOS Calls
                        	     2: ;;; Information from : http://map.grauw.nl/resources/msxbios.php
                        	     3: 
                        	     4: 
                        	     5: ;;; ====================================================
                        	     6: ;;; Block Transfer to VRAM from memory
                        	     7: ;;; Inputs:
                        	     8: ;;;       BC - Block Length
                        	     9: ;;;       DE - Start of VRAM
                        	    10: ;;;       HL - Start address of memory
                        	    11: ;;;       Registers: All
                        	    12: ;;; ====================================================
                        	    13: LDIRVM: equ $005C
                        	    14: 
                        	    15: ;;; ====================================================
                        	    16: ;;; Changes the screen colors
                        	    17: ;;; Inputs:
                        	    18: ;;;       Foreground Color in FORCLR
                        	    19: ;;;       Background Color in BAKCLR
                        	    20: ;;;       Border Color in BDRCLR
                        	    21: ;;;       Registers: All
                        	    22: ;;; ====================================================
                        	    23: CHGCLR:	equ $0062
                        	    24: 
                        	    25: ;;; ====================================================
                        	    26: ;;; Clears the screen
                        	    27: ;;; Inputs:
                        	    28: ;;;       Foreground Color in FORCLR
                        	    29: ;;;       Background Color in BAKCLR
                        	    30: ;;;       Border Color in BDRCLR
                        	    31: ;;;       Registers: All
                        	    32: ;;; ====================================================
                        	    33: CLS:	equ $00C3
                        	    34: 
                        	    35: ;;; ====================================================
                        	    36: ;;; Switches to SCREEN 0 (text screen with 40Ã—24 characters)Clears the screen
                        	    37: ;;; Inputs:
                        	    38: ;;;       TXTNAM
                        	    39: ;;;       TXTCGP
                        	    40: ;;;       Registers: All
                        	    41: ;;; ====================================================
                        	    42: INITXT:	equ #006C
                        	    43: 
                        	    44: ;;; ====================================================
                        	    45: ;;; One character input (waiting)
                        	    46: ;;; Output:
                        	    47: ;;;       A - ASCII Code of the input character
                        	    48: ;;;       Registers: AF
                        	    49: ;;; ====================================================	
                        	    50: CHGET equ $009F
                        	    51: 

Source: "./main.asm"
                        	     5: 	include "SYS_VARIABLES.asm"

Source: "SYS_VARIABLES.asm"
                        	     1: ;;; MSX System Variables
                        	     2: ;;; Information from : https://map.grauw.nl/resources/msxsystemvars.php
                        	     3: 	
                        	     4: FORCLR:	equ $F3E9		; Foreground Color - 1 byte
                        	     5: 
                        	     6: BAKCLR:	equ $F3EA		; Background Color - 1 byte
                        	     7: 
                        	     8: BDCLR:	equ $F3EB 		; Border Color - 1 byte
                        	     9: 
                        	    10: TXTNAM:	equ $F3B3
                        	    11: 

Source: "./main.asm"
                        	     6: 	include "CHAR_CODES.asm"

Source: "CHAR_CODES.asm"
                        	     1: ;;; Character codes for both input and output
                        	     2: 	
                        	     3: UP_CODE:	equ $1E
                        	     4: DOWN_CODE:	equ $1F
                        	     5: SPACE_CODE:	equ $20
                        	     6: POINTER_CODE:	equ $CF
                        	     7: 
                        	     8: 

Source: "./main.asm"
                        	     7: 	include "WORKING_VARIABLES.asm"

Source: "WORKING_VARIABLES.asm"
                        	     1: CUR_SEL_INDEX:	equ $C001	; Current index of the Cursor
                        	     2: OLD_SEL_INDEX:	equ $C002	; The last index of the Cursor
                        	     3: CUR_GAME:	equ $C003	; The game that was selected
                        	     4: CUR_PAGE:	equ $C004	; The page number
                        	     5: VRM_WRK_AREA:	equ $C100
                        	     6: 

Source: "./main.asm"
                        	     8: 	
                        	     9: ORGADR  equ $4000
                        	    10: 	
                        	    11: 	include "CART_HEADER.asm"

Source: "CART_HEADER.asm"
                        	     1: ;;; Header for the Cartridge to be recognised by the MSX
                        	     2: 	
                        	     3: 	org ORGADR
                        	     4: 				
00:4000 4142            	     5: 	db "AB"
00:4002 D143            	     6: 	dw Init
00:4004 0000            	     7: 	dw 0, 0, 0, 0, 0, 0
00:4006 0000
00:4008 0000
00:400A 0000
00:400C 0000
00:400E 0000
                        	     8: 

Source: "./main.asm"
                        	    12: 	include "VRAM_BUFFER.asm"

Source: "VRAM_BUFFER.asm"
                        	     1: VRAM_BUFFER:
00:4010 C6              	     2: 	db $c6,"  File                 ",$c6,"   Size    V0.1"
00:4011 202046696C652020
00:4019 2020202020202020
00:4021 20202020202020
00:4028 C6
00:4029 20202053697A6520
00:4031 20202056302E31
00:4038 C3              	     3: 	db $c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3,$c3
00:4039 C3
00:403A C3
00:403B C3
00:403C C3
00:403D C3
00:403E C3
00:403F C3
00:4040 C3
00:4041 C3
00:4042 C3
00:4043 C3
00:4044 C3
00:4045 C3
00:4046 C3
00:4047 C3
00:4048 C3
00:4049 C3
00:404A C3
00:404B C3
00:404C C3
00:404D C3
00:404E C3
00:404F C3
00:4050 C3
00:4051 C3
00:4052 C3
00:4053 C3
00:4054 C3
00:4055 C3
00:4056 C3
00:4057 C3
00:4058 C3
00:4059 C3
00:405A C3
00:405B 00
00:405C 00
00:405D 00
00:405E 00
00:405F 00
00:4060 CF              	     4: 	db $CF,"10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4061 3130205961726420
00:4069 4669676874202831
00:4071 39383629202020
00:4078 C6
00:4079 202020386B622020
00:4081 20202020202020
00:4088 2031302059617264	     5: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4090 2046696768742028
00:4098 3139383629202020
00:40A0 C6
00:40A1 202020386B622020
00:40A9 20202020202020
00:40B0 2031302059617264	     6: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:40B8 2046696768742028
00:40C0 3139383629202020
00:40C8 C6
00:40C9 202020386B622020
00:40D1 20202020202020
00:40D8 2031302059617264	     7: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:40E0 2046696768742028
00:40E8 3139383629202020
00:40F0 C6
00:40F1 202020386B622020
00:40F9 20202020202020
00:4100 2031302059617264	     8: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4108 2046696768742028
00:4110 3139383629202020
00:4118 C6
00:4119 202020386B622020
00:4121 20202020202020
00:4128 2031302059617264	     9: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4130 2046696768742028
00:4138 3139383629202020
00:4140 C6
00:4141 202020386B622020
00:4149 20202020202020
00:4150 2031302059617264	    10: 	db " 10 Yard Fight (1986)   ",$c6,"   8kb         "
00:4158 2046696768742028
00:4160 3139383629202020
00:4168 C6
00:4169 202020386B622020
00:4171 20202020202020
00:4178 2031393432202831	    11: 	db " 1942 (1986)(ASCII)(J   ",$c6,"   8kb         "
00:4180 3938362928415343
00:4188 494929284A202020
00:4190 C6
00:4191 202020386B622020
00:4199 20202020202020
00:41A0 2031393432202831	    12: 	db " 1942 (1987)(Zemina)(   ",$c6,"   8kb         "
00:41A8 39383729285A656D
00:41B0 696E612928202020
00:41B8 C6
00:41B9 202020386B622020
00:41C1 20202020202020
00:41C8 20334420476F6C66	    13: 	db " 3D Golf Simulation -   ",$c6,"  16kb         "
00:41D0 2053696D756C6174
00:41D8 696F6E202D202020
00:41E0 C6
00:41E1 202031366B622020
00:41E9 20202020202020
00:41F0 20334420476F6C66	    14: 	db " 3D Golf Simulation -   ",$c6,"  32kb         "
00:41F8 2053696D756C6174
00:4200 696F6E202D202020
00:4208 C6
00:4209 202033326B622020
00:4211 20202020202020
00:4218 2033442054656E6E	    15: 	db " 3D Tennis (1983)(ASC   ",$c6,"  32kb         "
00:4220 6973202831393833
00:4228 2928415343202020
00:4230 C6
00:4231 202033326B622020
00:4239 20202020202020
00:4240 2033442057617465	    16: 	db " 3D Water Driver (198   ",$c6,"  64kb         "
00:4248 7220447269766572
00:4250 2028313938202020
00:4258 C6
00:4259 202036346B622020
00:4261 20202020202020
00:4268 2041204C69666520	    17: 	db " A Life M36 Planet -    ",$c6,"  64kb         "
00:4270 4D333620506C616E
00:4278 6574202D20202020
00:4280 C6
00:4281 202036346B622020
00:4289 20202020202020
00:4290 20412E452E202831	    18: 	db " A.E. (1983)(Toshiba-   ",$c6,"  64kb         "
00:4298 3938332928546F73
00:42A0 686962612D202020
00:42A8 C6
00:42A9 202036346B622020
00:42B1 20202020202020
00:42B8 2041312053706972	    19: 	db " A1 Spirit - The Way    ",$c6," 128kb         "
00:42C0 6974202D20546865
00:42C8 2057617920202020
00:42D0 C6
00:42D1 203132386B622020
00:42D9 20202020202020
00:42E0 204163746D616E20	    20: 	db " Actman (1984)(ASCII)   ",$c6," 128kb         "
00:42E8 2831393834292841
00:42F0 5343494929202020
00:42F8 C6
00:42F9 203132386B622020
00:4301 20202020202020
00:4308 20416476656E2763	    21: 	db " Adven'chuta! (1983)(   ",$c6," 128kb         "
00:4310 6875746121202831
00:4318 3938332928202020
00:4320 C6
00:4321 203132386B622020
00:4329 20202020202020
00:4330 20416C63617A6172	    22: 	db " Alcazar - The Forgot   ",$c6," 128kb         "
00:4338 202D205468652046
00:4340 6F72676F74202020
00:4348 C6
00:4349 203132386B622020
00:4351 20202020202020
00:4358 20416C6962616261	    23: 	db " Alibaba and 40 Thiev   ",$c6," 256kb         "
00:4360 20616E6420343020
00:4368 5468696576202020
00:4370 C6
00:4371 203235366B622020
00:4379 20202020202020
00:4380 20416C69656E2038	    24: 	db " Alien 8 (1985)(Ultim   ",$c6," 256kb         "
00:4388 2028313938352928
00:4390 556C74696D202020
00:4398 C6
00:4399 203235366B622020
00:43A1 20202020202020
00:43A8 2020202020202020	    25: 	db "                         Page 1/300     "
00:43B0 2020202020202020
00:43B8 2020202020202020
00:43C0 205061676520312F
00:43C8 3330302020202020
                        	    26: VRAM_BUFFER_END:
00:43D0 00              	    27: 	nop
                        	    28: 

Source: "./main.asm"
                        	    13: 				; ==[ Program ]=============================================
                        	    14: Init:
                        	    15: 	;; Set Screen Mode to 0
00:43D1 CD6C00          	    16: 	call INITXT
                        	    17: 	;; Set Pallette to White on Black
00:43D4 3E01            	    18: 	ld a, 1
00:43D6 32EAF3          	    19: 	ld (BAKCLR), a
00:43D9 32EBF3          	    20: 	ld (BDCLR), a
00:43DC CD6200          	    21: 	call CHGCLR
                        	    22: 	;; Copy the VRAM_BUFFER to RAM so that we can update it
00:43DF CDF643          	    23: 	call CopyBufferToRam
                        	    24: 	;; Copy the VRAM_BUFFER in RAM to VRAM
00:43E2 CDE843          	    25: 	call CopyWorkBufferToVRAM
00:43E5 CD8044          	    26: 	call MainLoop
                        	    27: 
                        	    28: CopyWorkBufferToVRAM:
00:43E8 01C003          	    29: 	ld bc, 960
00:43EB ED5BB3F3        	    30: 	ld de, (TXTNAM)
00:43EF 2100C1          	    31: 	ld hl, VRM_WRK_AREA
00:43F2 CD5C00          	    32: 	call LDIRVM
00:43F5 C9              	    33: 	ret
                        	    34: 	
                        	    35: CopyBufferToRam:
00:43F6 211040          	    36: 	ld hl, VRAM_BUFFER
00:43F9 1100C1          	    37: 	ld de, VRM_WRK_AREA
00:43FC 01C003          	    38: 	ld bc, 960
00:43FF EDB0            	    39: 	ldir
00:4401 C9              	    40: 	ret
                        	    41: 	
                        	    42: IncrementSelector:
                        	    43: 	;; Will need to blank the current selector on the screen before updating the values
00:4402 2A01C0          	    44: 	ld hl, (CUR_SEL_INDEX)
00:4405 7D              	    45: 	ld a, l
00:4406 3202C0          	    46: 	ld (OLD_SEL_INDEX),a
00:4409 23              	    47: 	inc hl
00:440A 7D              	    48: 	ld a, l
00:440B FE15            	    49: 	cp $15
00:440D CC6D44          	    50: 	call z, ZeroSelector
00:4410 3201C0          	    51: 	ld (CUR_SEL_INDEX), a
00:4413 CD3244          	    52: 	call UpdateCursor
00:4416 CDE843          	    53: 	call CopyWorkBufferToVRAM
00:4419 C9              	    54: 	ret
                        	    55: 
                        	    56: DecrementSelector:
                        	    57: 	;; Will need to Blank the Current Selector On the screen before updating the value
00:441A 2A01C0          	    58: 	ld hl, (CUR_SEL_INDEX)
00:441D 7D              	    59: 	ld a, l
00:441E 3202C0          	    60: 	ld (OLD_SEL_INDEX),a
00:4421 2B              	    61: 	dec hl
00:4422 7D              	    62: 	ld a, l
00:4423 FEFF            	    63: 	cp $FF
00:4425 CC6F44          	    64: 	call z, ClampSelector
00:4428 3201C0          	    65: 	ld (CUR_SEL_INDEX), a
00:442B CD3244          	    66: 	call UpdateCursor
00:442E CDE843          	    67: 	call CopyWorkBufferToVRAM
00:4431 C9              	    68: 	ret
                        	    69: 
                        	    70: UpdateCursor:
00:4432 ED5B01C0        	    71: 	ld de, (CUR_SEL_INDEX)
00:4436 3E28            	    72: 	ld a, 40
00:4438 CD5944          	    73: 	call Mult8x16
00:443B 1100C1          	    74: 	ld de, VRM_WRK_AREA
00:443E 19              	    75: 	add hl, de
00:443F 115000          	    76: 	ld de, 80
00:4442 19              	    77: 	add hl, de
00:4443 36CF            	    78: 	ld (hl), $CF
00:4445 ED5B02C0        	    79: 	ld de, (OLD_SEL_INDEX)
00:4449 3E28            	    80: 	ld a, 40
00:444B CD5944          	    81: 	call Mult8x16
00:444E 1100C1          	    82: 	ld de, VRM_WRK_AREA
00:4451 19              	    83: 	add hl, de
00:4452 115000          	    84: 	ld de, 80
00:4455 19              	    85: 	add hl, de
00:4456 3620            	    86: 	ld (hl), $20
00:4458 C9              	    87: 	ret
                        	    88: ;;; Mult DE by A and store Result in AHL
                        	    89: Mult8x16:
00:4459 0E00            	    90: 	ld c, 0
00:445B 61              	    91: 	ld h, c
00:445C 6C              	    92: 	ld l, h
00:445D 87              	    93: 	add a, a
00:445E 3002            	    94: 	jr nc, $+4
00:4460 62              	    95: 	ld h,d
00:4461 6B              	    96: 	ld l,e
00:4462 0607            	    97: 	ld b,7
                        	    98: Mult_loop:
00:4464 29              	    99: 	add hl, hl
00:4465 17              	   100: 	rla
00:4466 3002            	   101: 	jr nc, $+4
00:4468 19              	   102: 	add hl, de
00:4469 89              	   103: 	adc a, c
00:446A 10F8            	   104: 	djnz Mult_loop
00:446C C9              	   105: 	ret
                        	   106: 	
                        	   107: ZeroSelector:
00:446D AF              	   108: 	xor a
00:446E C9              	   109: 	ret
                        	   110: 
                        	   111: ClampSelector:
00:446F 3E14            	   112: 	ld a, $14
00:4471 C9              	   113: 	ret
                        	   114: 	
                        	   115: CheckInput:
00:4472 CD9F00          	   116: 	call CHGET
00:4475 FE1E            	   117: 	cp 30
00:4477 CC1A44          	   118: 	call z, DecrementSelector
00:447A FE1F            	   119: 	cp 31
00:447C CC0244          	   120: 	call z, IncrementSelector
00:447F C9              	   121: 	ret
                        	   122: 
                        	   123: MainLoop:
00:4480 F3              	   124: 	di
00:4481 CD7244          	   125: 	call CheckInput
00:4484 18FA            	   126: 	jr MainLoop
                        	   127: 		
                        	   128: 


Symbols by name:
BAKCLR                           E:F3EA
BDCLR                            E:F3EB
CheckInput                       A:4472
CHGCLR                           E:0062
CHGET                            E:009F
ClampSelector                    A:446F
CopyBufferToRam                  A:43F6
CopyWorkBufferToVRAM             A:43E8
CUR_SEL_INDEX                    E:C001
DecrementSelector                A:441A
IncrementSelector                A:4402
Init                             A:43D1
INITXT                           E:006C
LDIRVM                           E:005C
MainLoop                         A:4480
Mult8x16                         A:4459
Mult_loop                        A:4464
OLD_SEL_INDEX                    E:C002
ORGADR                           E:4000
TXTNAM                           E:F3B3
UpdateCursor                     A:4432
VRAM_BUFFER                      A:4010
VRAM_BUFFER_END                  A:43D0
VRM_WRK_AREA                     E:C100
ZeroSelector                     A:446D

Symbols by value:
005C LDIRVM
0062 CHGCLR
006C INITXT
009F CHGET
4000 ORGADR
4010 VRAM_BUFFER
43D0 VRAM_BUFFER_END
43D1 Init
43E8 CopyWorkBufferToVRAM
43F6 CopyBufferToRam
4402 IncrementSelector
441A DecrementSelector
4432 UpdateCursor
4459 Mult8x16
4464 Mult_loop
446D ZeroSelector
446F ClampSelector
4472 CheckInput
4480 MainLoop
C001 CUR_SEL_INDEX
C002 OLD_SEL_INDEX
C100 VRM_WRK_AREA
F3B3 TXTNAM
F3EA BAKCLR
F3EB BDCLR
